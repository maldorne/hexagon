
This is a brief help list on basic object manipulation commands.

call <function>              -- Just see the help file, ok?
trans <player/monster>       -- Bring <player/monster> to you.
goto <player/filename>       -- Teleport to <player/filename>.
exec <filename>              -- Execute code (see help file)
discard <filename>           -- Unload the file from memory.
dest <object>                -- Destruct <object>.
clone <object>               -- Create <object>.
invis                        -- Turn invisible to players.
vis                          -- Turn visible again.

call - The base calling function.

Syntax

call function(args) object
;object->function(args)

Description

The call command allows you to call functions on objects.  This is a very
powerful command and one of the most useful debug commands.  The
function name is fairly explanitory, it is something like "short" or
"long".  The args are very flexible and I will now give you a description
of all the forms that the arguments to the functions can take.  Of course
all object references are done through wiz_present.

Numbers are of course passed as numbers, bet that surprised you :)  Strings
can take a number of forms.  Any of ', " or ` can be used to mark the
start and end of strings, it will match the two sorts of string ends.
So if you wish to have a ' in your string you can use "'s to include it.
ie "thieves' cant".  If the text is surrounded by |'s the args inside
is passed directly to wiz_present and will error if it cannot find an
object to match.  {}'s mean arrays.  So {1, 2, 3} is a array of size
3 containing the elements 1, 2, 3.  Anything of the form ob->func(args)
is replaced with the return value of the function.

The default parseing of a paramater (if it is not specificaly specified)
is to try and see if it is an object.  If this is the case it is replaced
with this, if not it is taken as a string.

Object values and return values from function calls.  If there is only
one matching object a single object is returned.  If more than one
object matches it is replaced with the array of objects.  The same
applies to return values from functions.

In summary:

  <num> A number
  '<anything>'  A string
  "<anythinng>" A string
  `<anything>`  A string
  {args}  An array conatining args. eg { 1, "bing", { 'yellow' } }
  ob->func(args)  Calls function func on object ob. eg labels->short()
  |<text>|  Replaced with objects.  eg all in pinkfish
  <default> The default text is first checked to see if it is a object, if it is it is replaced with the object, otherwise it is taken as a string.

Examples

> call adjust_money(1, "gold") me
<Return thingy printed here>
> ;me->adjust_money(1, "gold");
({ -- sizeof 1
   0
})

Usage : trans <person>

Trans takes the person you specify and brings them to your current location.
The person can be specified using nicknames or their actual name and can be
any living object.

Examples:

trans pinkfish

trans pf

trans detritus

Usage : goto <room|person>

Goto is used to move around the mud quickly.  Instead of walking from room to
room, you can immediately go to any room on the mud by typing goto followed by
its path name either relative to your current dir, or its absolute path from 
the root dir.  You can also goto any living thing by typing goto followed by
the name of the thing you wish to go to.

Examples:

goto testroom
goto /home/ducky/workroom
goto ducky
goto orc

Usage : exec <lpc code>

Exec can be used to execute a small amount of lpc.  What the function does is
write a temporary file call ~/exec_tmp.c and call a function containing the
code you provided on that object.  It will delete everything when it is finished
and clean up everything.  It will also print whatever return value is passed.

Examples:

exec return users()
exec return query_ip_number(this_player())
exec string s; s = "duck"; s += "fish"; return s

Usage : discard

Discard is used to remove a loaded object from memory.  If you are working on
an object and are finished with it, you can help the mud reduce the amount of
memory it is using by discarding the object.  Do not discard objects that are
going to be used by other people as the mud will then have to load it again.

Examples:

discard server.c

discard test.c

discard /home/ducky/wedding-ring

Usage : dest <object>
      : dest query <object>

Dest is used to destruct objects.  Destruct will destruct a cloned instance
of an object or the original instance of the object.
The 'query' option will cause dest to ask you before desting
each object.

Examples:

dest test

dest every test in me

dest all in here except me

Usage : clone <objects>

Clone is used to get a usable copy of an object on disk.  This is how all
objects used in the game are created, except the rare one off objects that
do not actually move into the game usually.  You must specify the file name
of the objects you wish to clone.

Examples:

clone /obj/torch.c

clone/obj/t*

clone torch.c sword.c armour.c

